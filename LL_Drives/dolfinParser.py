'''
Developer: Daniel Hull dhull@baebies.com
Plese reach out with any questions or points of improvement
Copyright Baebies 2018
See Readme for additional details
'''

class dolfinParser:
    def __init__(self, file, selectors, pathway, norm_factor):
        #import relevant modules
        import os
        import pandas as pd
        global os, pd
        self.file = file
        self.filter = selectors
        self.pathway = pathway
        self.norm_factor = norm_factor

    def get_id_info(self):
        """
        Puts the data into a data structure output that is a dictionary of dictionaries with highest level being
        the selectors in the constructor and the second level being a description and more
        and the final being lists of the important information

        :return:
        """

        os.chdir(self.pathway)
        keys = ['results', 'exp_time_sec', 'converted']
        data = pd.read_csv(self.file)
        data_ids = data['id']
        self.output = {}
        values = self.filter.values()
        values = [val for a_list in values for val in a_list]
        for id in values:
            self.output[id] = {key:[] for key in keys}
            for loc, val in enumerate(data_ids):
                if id in val:
                    if data.iloc[loc, 1] == 'timestamp':
                        self.output[id]['exp_time_sec'].append(float(data.iloc[loc,3])/1000.)
                    elif data.iloc[loc,1]=='fluorimeter':
                        val = float(data.iloc[loc,3])
                        self.output[id]['results'].append(val)
                        self.output[id]['description'] = ['fluorimeter']
                        self.output[id]['converted'].append(val*self.norm_factor)
                    elif data.iloc[loc,1]=='spectrometer':
                        self.output[id]['results'].append(int(data.iloc[loc,3]))
                        self.output[id]['description'] = ['spectrometer']
                        self.output[id]['wavelengths'] = [337.117,337.569,338.021,338.473,338.925,339.377,339.829,340.281,340.733,341.185,341.637,342.09,342.542,342.995,343.447,343.9,344.352,344.805,345.258,345.711,346.164,346.617,347.07,347.523,347.976,348.429,348.882,349.336,349.789,350.243,350.696,351.15,351.603,352.057,352.511,352.965,353.418,353.872,354.326,354.78,355.235,355.689,356.143,356.597,357.052,357.506,357.961,358.415,358.87,359.324,359.779,360.234,360.689,361.144,361.599,362.053,362.509,362.964,363.419,363.874,364.329,364.785,365.24,365.696,366.151,366.607,367.063,367.518,367.974,368.43,368.886,369.342,369.798,370.254,370.71,371.166,371.622,372.079,372.535,372.992,373.448,373.905,374.361,374.818,375.275,375.731,376.188,376.645,377.102,377.559,378.016,378.473,378.93,379.388,379.845,380.302,380.76,381.217,381.675,382.132,382.59,383.048,383.505,383.963,384.421,384.879,385.337,385.795,386.253,386.711,387.17,387.628,388.086,388.545,389.003,389.462,389.92,390.379,390.837,391.296,391.755,392.214,392.673,393.132,393.591,394.05,394.509,394.968,395.427,395.887,396.346,396.805,397.265,397.724,398.184,398.644,399.103,399.563,400.023,400.483,400.943,401.403,401.863,402.323,402.783,403.243,403.703,404.164,404.624,405.084,405.545,406.005,406.466,406.926,407.387,407.848,408.309,408.77,409.231,409.691,410.153,410.614,411.075,411.536,411.997,412.458,412.92,413.381,413.843,414.304,414.766,415.227,415.689,416.151,416.613,417.074,417.536,417.998,418.46,418.922,419.384,419.847,420.309,420.771,421.233,421.696,422.158,422.621,423.083,423.546,424.009,424.471,424.934,425.397,425.86,426.323,426.786,427.249,427.712,428.175,428.638,429.101,429.565,430.028,430.491,430.955,431.418,431.882,432.346,432.809,433.273,433.737,434.201,434.664,435.128,435.592,436.056,436.52,436.985,437.449,437.913,438.377,438.842,439.306,439.771,440.235,440.7,441.164,441.629,442.094,442.558,443.023,443.488,443.953,444.418,444.883,445.348,445.813,446.278,446.744,447.209,447.674,448.14,448.605,449.071,449.536,450.002,450.467,450.933,451.399,451.865,452.331,452.797,453.262,453.728,454.195,454.661,455.127,455.593,456.059,456.526,456.992,457.458,457.925,458.391,458.858,459.325,459.791,460.258,460.725,461.192,461.658,462.125,462.592,463.059,463.526,463.993,464.461,464.928,465.395,465.863,466.33,466.797,467.265,467.732,468.2,468.667,469.135,469.603,470.071,470.539,471.006,471.474,471.942,472.41,472.878,473.346,473.815,474.283,474.751,475.219,475.688,476.156,476.625,477.093,477.562,478.03,478.499,478.968,479.436,479.905,480.374,480.843,481.312,481.781,482.25,482.719,483.188,483.657,484.127,484.596,485.065,485.535,486.004,486.474,486.943,487.413,487.882,488.352,488.822,489.291,489.761,490.231,490.701,491.171,491.641,492.111,492.581,493.051,493.521,493.992,494.462,494.932,495.403,495.873,496.344,496.814,497.285,497.755,498.226,498.697,499.168,499.638,500.109,500.58,501.051,501.522,501.993,502.464,502.935,503.407,503.878,504.349,504.82,505.292,505.763,506.235,506.706,507.178,507.649,508.121,508.593,509.064,509.536,510.008,510.48,510.952,511.424,511.896,512.368,512.84,513.312,513.784,514.257,514.729,515.201,515.674,516.146,516.618,517.091,517.564,518.036,518.509,518.982,519.454,519.927,520.4,520.873,521.346,521.819,522.292,522.765,523.238,523.711,524.184,524.657,525.131,525.604,526.077,526.551,527.024,527.498,527.971,528.445,528.919,529.392,529.866,530.34,530.814,531.287,531.761,532.235,532.709,533.183,533.657,534.132,534.606,535.08,535.554,536.028,536.503,536.977,537.452,537.926,538.401,538.875,539.35,539.824,540.299,540.774,541.249,541.723,542.198,542.673,543.148,543.623,544.098,544.573,545.048,545.523,545.999,546.474,546.949,547.425,547.9,548.375,548.851,549.326,549.802,550.278,550.753,551.229,551.705,552.18,552.656,553.132,553.608,554.084,554.56,555.036,555.512,555.988,556.464,556.94,557.416,557.893,558.369,558.845,559.322,559.798,560.275,560.751,561.228,561.704,562.181,562.658,563.134,563.611,564.088,564.565,565.042,565.519,565.995,566.472,566.95,567.427,567.904,568.381,568.858,569.335,569.813,570.29,570.767,571.245,571.722,572.2,572.677,573.155,573.632,574.11,574.588,575.066,575.543,576.021,576.499,576.977,577.455,577.933,578.411,578.889,579.367,579.845,580.323,580.802,581.28,581.758,582.236,582.715,583.193,583.672,584.15,584.629,585.107,585.586,586.065,586.543,587.022,587.501,587.98,588.458,588.937,589.416,589.895,590.374,590.853,591.332,591.811,592.291,592.77,593.249,593.728,594.208,594.687,595.166,595.646,596.125,596.605,597.084,597.564,598.043,598.523,599.003,599.482,599.962,600.442,600.922,601.402,601.882,602.362,602.842,603.322,603.802,604.282,604.762,605.242,605.723,606.203,606.683,607.163,607.644,608.124,608.605,609.085,609.566,610.046,610.527,611.007,611.488,611.969,612.45,612.93,613.411,613.892,614.373,614.854,615.335,615.816,616.297,616.778,617.259,617.74,618.221,618.703,619.184,619.665,620.146,620.628,621.109,621.591,622.072,622.554,623.035,623.517,623.998,624.48,624.962,625.443,625.925,626.407,626.889,627.371,627.853,628.335,628.817,629.299,629.781,630.263,630.745,631.227,631.709,632.191,632.674,633.156,633.638,634.121,634.603,635.086,635.568,636.05,636.533,637.016,637.498,637.981,638.463,638.946,639.429,639.912,640.395,640.877,641.36,641.843,642.326,642.809,643.292,643.775,644.258,644.741,645.225,645.708,646.191,646.674,647.158,647.641,648.124,648.608,649.091,649.575,650.058,650.542,651.025,651.509,651.992,652.476,652.96,653.443,653.927,654.411,654.895,655.379,655.863,656.346,656.831,657.315,657.799,658.283,658.767,659.251,659.735,660.219,660.703,661.188,661.672,662.156,662.641,663.125,663.609,664.094,664.578,665.063,665.547,666.032,666.517,667.001,667.486,667.971,668.455,668.94,669.425,669.91,670.395,670.88,671.365,671.849,672.335,672.82,673.305,673.79,674.275,674.76,675.245,675.73,676.216,676.701,677.186,677.672,678.157,678.642,679.128,679.613,680.099,680.584,681.07,681.555,682.041,682.527,683.012,683.498,683.984,684.47,684.955,685.441,685.927,686.413,686.899,687.385,687.871,688.357,688.843,689.329,689.815,690.301,690.788,691.274,691.76,692.246,692.732,693.219,693.705,694.192,694.678,695.164,695.651,696.137,696.624,697.11,697.597,698.084,698.57,699.057,699.544,700.031,700.517,701.004,701.491,701.978,702.465,702.951,703.438,703.925,704.412,704.899,705.386,705.874,706.361,706.848,707.335,707.822,708.309,708.797,709.284,709.771,710.259,710.746,711.233,711.721,712.208,712.696,713.183,713.671,714.158,714.646,715.134,715.621,716.109,716.597,717.084,717.572,718.06,718.548,719.036,719.523,720.011,720.499,720.987,721.475,721.963,722.451,722.939,723.427,723.915,724.404,724.892,725.38,725.868,726.357,726.845,727.333,727.821,728.31,728.798,729.287,729.775,730.263,730.752,731.241,731.729,732.218,732.706,733.195,733.684,734.172,734.661,735.15,735.638,736.127,736.616,737.105,737.594,738.083,738.572,739.06,739.549,740.038,740.527,741.017,741.506,741.995,742.484,742.973,743.462,743.951,744.441,744.93,745.419,745.908,746.398,746.887,747.376,747.866,748.355,748.845,749.334,749.824,750.313,750.803,751.292,751.782,752.272,752.761,753.251,753.741,754.23,754.72,755.21,755.7,756.189,756.679,757.169,757.659,758.149,758.639,759.129,759.619,760.109,760.599,761.089,761.579,762.069,762.559,763.049,763.54,764.03,764.52,765.01,765.501,765.991,766.481,766.972,767.462,767.952,768.443,768.933,769.424,769.914,770.405,770.895,771.386,771.876,772.367,772.858,773.348,773.839,774.33,774.82,775.311,775.802,776.293,776.784,777.274,777.765,778.256,778.747,779.238,779.729,780.22,780.711,781.202,781.693,782.184,782.675,783.166,783.657,784.148,784.64,785.131,785.622,786.113,786.604,787.096,787.587,788.078,788.57,789.061,789.552,790.044,790.535,791.027,791.518,792.01,792.501,792.993,793.484,793.976,794.467,794.959,795.451,795.942,796.434,796.926,797.418,797.909,798.401,798.893,799.385,799.876,800.368,800.86,801.352,801.844,802.336,802.828,803.32,803.812,804.304,804.796,805.288,805.78,806.272,806.764,807.256,807.748,808.241,808.733,809.225,809.717,810.21,810.702,811.194,811.686,812.179,812.671,813.164,813.656,814.148,814.641,815.133,815.626,816.118,816.611,817.103,817.596,818.088,818.581,819.073,819.566,820.059,820.551,821.044,821.537,822.029,822.522,823.015,823.508,824]
                    elif data.iloc[loc,1] in ['deck_temp','aux_temp','amb_temp']:
                        self.output[id]['results'].append(float(data.iloc[loc, 3]))
                        self.output[id]['description'] = ['temp']
                    elif data.iloc[loc,1]=='voltage':
                        self.output[id]['results'].append(float(data.iloc[loc, 3]))
                        self.output[id]['description'] = [data.iloc[loc,1]]
                    elif data.iloc[loc,1] in [' start_time',' end_time']:
                        self.output[id]['description'] = [data.iloc[loc,1]]
                        self.output[id]['results'].append(str(data.iloc[loc, 3]))

    def get_blank_subtracted_vals(self, assignments, offsets):
        """

        :param assignments: (dict) puts pairs of blank and droplet labels blanks are keys and detections are values
        :return:
        """
        import operator
        from sklearn import linear_model
        import numpy as np
        regr = linear_model.LinearRegression()

        for key in sorted(assignments.keys()):
            id = 'blank_sub_' + str(key)
            self.output[id] = {}
            self.output[id]['exp_time_sec'] = self.output[key]['exp_time_sec']
            self.output[id]['post_merge_time'] = [x - self.output[assignments[key][1]]['exp_time_sec'][0] for x in self.output[id]['exp_time_sec']]
            self.output[id]['description'] = ['fluorimeter']
            self.output[id]['results'] = list(map(operator.sub, self.output[key]['results'], self.output[assignments[key][0]]['results']))
            self.output[id]['converted'] = list(map(operator.sub, self.output[key]['converted'], self.output[assignments[key][0]]['converted']))
            self.output[id]['Norm Factor'] = [self.norm_factor]
            self.output[id]['offset'] = offsets
            # bad indices are where the 1E6 value saturated the detector
            bad_indices = [idx for idx, el in enumerate(self.output[id]['results']) if el > 990000]

            # pop the bad indices in reversed
            for idx in reversed(bad_indices):
                self.output[id]['results'].pop(idx)
                self.output[id]['exp_time_sec'].pop(idx)
                self.output[id]['converted'].pop(idx)

            #sklearn requires numpy objects
            if offsets:
                regr.fit(np.array(self.output[id]['exp_time_sec'][offsets[0]:offsets[1]+1]).reshape(-1,1), np.array(self.output[id]['results'][offsets[0]:offsets[1]+1]).reshape(-1,1))
                self.output[id]['slope per sec'] = [regr.coef_[0][0]] # /min
                self.output[id]['intercept'] = [regr.intercept_[0]] # /min
                self.output[id]['r squared'] = [regr.score(np.array(self.output[id]['exp_time_sec'][offsets[0]:offsets[1]+1]).reshape(-1,1), np.array(self.output[id]['results'][offsets[0]:offsets[1]+1]).reshape(-1,1))]
            else:
                regr.fit(np.array(self.output[id]['exp_time_sec']).reshape(-1,1), np.array(self.output[id]['results']).reshape(-1,1))
                self.output[id]['slope per sec'] = [regr.coef_[0][0]] # /min
                self.output[id]['intercept'] = [regr.intercept_[0]] # /min
                self.output[id]['r squared'] = [regr.score(np.array(self.output[id]['exp_time_sec']).reshape(-1,1), np.array(self.output[id]['results']).reshape(-1,1))]
